{"version":3,"sources":["constants.tsx","actions/settings/index.tsx","components/header/navbar.tsx","actions/company/index.tsx","components/header/index.tsx","components/companies/Company.tsx","components/companies/CompanyList.tsx","pages/CompanyPage.tsx","Router.tsx","serviceWorker.ts","reducers/settings/index.tsx","reducers/company/index.tsx","reducers/index.tsx","loadStorage.tsx","index.tsx","Store.tsx"],"names":["LANGUAGES","PREFIXES","changeLanguage","language","type","changePrefix","prefix","current_language","dispatch","target_language","forEach","elm","indexOf","withRouter","useDispatch","history","useHistory","settings","useSelector","state","SettingsReducer","companies","CompanyReducer","elements","className","href","onClick","e","preventDefault","location","pathname","push","targetLanguage","length","map","lang","key","reduce","prev","curr","element","i","filter","c","slug","target","getAttribute","fetchCompanies","axios","get","then","resp","entries","data","feed","entry","_","groupBy","records","values","row","col","col_val","header","head","drop","r","zipObject","company","id","address","url","description","founded_at","image","logo_url","name","name_en","name_ko","registered_at","toUpperCase","Hangul","tuneCompany","Header","useState","curtain","setCurtain","to","src","alt","alert","Company","CompanyList","candidate","j","match","params","companyReducer","lastFetched","useEffect","Date","parse","candidates","companiesByPrefix","sortBy","o","App","path","component","CompanyPage","Boolean","window","hostname","action","undefined","toISOString","rootReducer","combineReducers","loadState","serializedState","localStorage","getItem","JSON","err","saveState","stringify","setItem","store","persistedState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","CombinedReducer","applyMiddleware","thunk","subscribe","throttle","getState","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f98224b7.chunk.js","sourcesContent":["export const LANGUAGE_KOREAN = 'ko';\nexport const LANGUAGE_ENGLISH = 'en';\nexport const LANGUAGE_DEFAULT = LANGUAGE_KOREAN;\nexport const LANGUAGES = [LANGUAGE_KOREAN, LANGUAGE_ENGLISH] as const;\nexport type LANUGAGE_TYPE = (typeof LANGUAGES)[number];\n\nexport const PREFIXES = {\n  [LANGUAGE_KOREAN]: ['가', '나', '다', '라', '마', '바', '사', '아', '자', '차', '카', '타', '파', '하'],\n  // [LANGUAGE_KOREAN]: ['ㄱ', 'ㄴ', 'ㄷ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n  [LANGUAGE_ENGLISH]: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n};\n\nexport const forceCompanyRefreshEmbago = 3600 * 1000\n// export const forceCompanyRefreshEmbago = 10 * 1000","import { AnyAction } from 'redux';\nimport { LANGUAGES, LANUGAGE_TYPE, LANGUAGE_KOREAN, PREFIXES } from '../../constants';\n\nexport const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\nexport interface changeLanguageType extends AnyAction {\n  language: LANUGAGE_TYPE\n}\nexport const changeLanguage = (language: LANUGAGE_TYPE = LANGUAGE_KOREAN): changeLanguageType => ({type: CHANGE_LANGUAGE, language: language})\nexport const toggleLanguage = (language: LANUGAGE_TYPE) => {\n  return (dispatch: any) => {\n    const targetLanguage = LANGUAGES[(LANGUAGES.indexOf(language) + 1) % LANGUAGES.length]\n    dispatch(changeLanguage(targetLanguage))\n  }\n}\n\nexport interface changePrefixType extends AnyAction {\n  prefix?: string\n}\nexport const CHANGE_PREFIX = 'CHANGE_PREFIX';\nexport const changePrefix = (prefix?: string, current_language?: LANUGAGE_TYPE) => {\n  return (dispatch: any) => {\n    let target_language = null;\n    if (prefix) {\n      LANGUAGES.forEach(elm => {\n        if (PREFIXES[elm].indexOf(prefix) > 0) {\n          target_language = elm\n        }\n      })\n    }\n    if (target_language && (current_language !== target_language)) dispatch(changeLanguage(target_language as LANUGAGE_TYPE))\n    return dispatch({type: CHANGE_PREFIX, prefix: prefix})\n  }\n}","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from '../../reducers';\nimport { PREFIXES, LANGUAGES, LANUGAGE_TYPE } from '../../constants';\nimport { toggleLanguage, changePrefix } from '../../actions/settings';\nimport { withRouter } from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\nconst Navbar: React.FC = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const settings = useSelector((state: StoreState) => state.SettingsReducer);\n  const companies = useSelector((state: StoreState) => state.CompanyReducer.companies);\n  const elements: string[] = PREFIXES[settings.language];\n\n  return (<nav className={settings.language}>\n    <a href=\"#convert\" className=\"convert\" onClick={(e) => {\n      e.preventDefault();\n      if (history.location.pathname !== '/') history.push('/')\n      dispatch(toggleLanguage(settings.language));\n    }}>\n      <div>\n        {LANGUAGES.map<React.ReactNode>((lang: LANUGAGE_TYPE) => {\n          return (<span className={lang} key={lang}>{PREFIXES[lang][0]}</span>);\n        }).reduce((prev, curr) => {\n          return [prev, '/', curr]\n        })}\n      </div>\n    </a>\n    <ul className={`category ${settings.language}`}>\n      {elements.map((element: string, i: number) => {\n        return (<li key={i} className={`c${(companies || []).filter((c) => c.slug[settings.language] === element).length}`}>\n          <a href={`/${element}`} className={element === settings.prefix ? 'active' : ''} onClick={(e) => {\n            e.preventDefault();\n            dispatch(changePrefix(element, settings.language))\n            const isActive = (e.target as any).getAttribute('class') === 'active';\n            if (isActive) { \n              history.push('/')\n            } else {\n              history.push(`/${element}`)\n            }\n          }}>\n            {element}\n          </a>\n        </li>);\n      })}\n    </ul>\n  </nav>);\n}\n\nexport default withRouter(Navbar);","import axios from 'axios'\nimport { AnyAction } from 'redux';\nimport { CompanyType } from '../../reducers/company'\nimport * as Hangul from 'hangul-js';\n// import groupBy from 'lodash/groupBy';\n// import sortBy from 'lodash/sortBy';\nimport _ from 'lodash';\n\nexport interface CompanyResponseItem {\n  address: string,\n  description: string,\n  founded_at: string,\n  image: string,\n  name: {\n    \"en\": string,\n    \"ko\": string,\n  },\n  registered_at: string\n}\nconst indexKorean = (name: string) => {\n  return Hangul.assemble([\n    Hangul.disassemble(name)[0],\n    'ㅏ'\n  ])\n}\n\nconst tuneCompany = (company: any): CompanyType => {\n  return {\n    id: company.id,\n    address: company.url,\n    description: company.description,\n    founded_at: company.founded_at,\n    image: company.logo_url,\n    name: {\n      'en': company.name_en,\n      'ko': company.name_ko,\n    },\n    registered_at: company.registered_at,\n    slug: {\n      'en': (company.name_en[0] as string).toUpperCase(),\n      'ko': indexKorean(company.name_ko),\n    }\n  }\n}\n\nexport type fetchCompaniesType = AnyAction;\nexport const FETCHED_COMPANIES = 'FETCHED_COMPANIES';\nexport const fetchCompanies = () => {\n  return (dispatch: any) => {\n    return axios.get(\n      'https://spreadsheets.google.com/feeds/cells/1x0drF0gZ27euPdiPTxcKCxZJQR50Z0_6b4phWBXu5eM/1/public/full?alt=json'\n    ).then(resp => {\n      const entries = resp.data.feed.entry;\n      let data = _.groupBy(entries, e => e['gs$cell']['row']);\n      let records = _.map(\n        _.values(data),\n        (row: any) => row.map((col: any) => {\n          let col_val = col['gs$cell']['$t'];\n          if (col_val === 'null') return undefined\n          else return col_val\n        })\n      );\n\n      const header = _.head(records) as Array<string>;\n      const rows = _.drop(records);\n\n      const companies = rows.map(r => _.zipObject(header, r))\n\n      dispatch({\n        type: FETCHED_COMPANIES,\n        companies: companies.map(c => tuneCompany(c))\n      })\n    })\n  }\n}","import React, { useState } from 'react';\nimport Navbar from './navbar';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { fetchCompanies } from '../../actions/company';\n\nconst Header: React.FC = () => {\n  const dispatch = useDispatch();\n  const [curtain, setCurtain] = useState(false)\n\n  return (<div id=\"header\">\n    <header>\n      <Link to=\"/\" className=\"logo\">\n        <img src=\"/logo.png\" alt=\"브랜디드\"/>\n      </Link>\n      <ul className=\"anchors\">\n        <li>\n          <a href=\"#refresh\" onClick={(e) => {\n            e.preventDefault();\n            alert('업체 목록을 갱신합니다.');\n            dispatch(fetchCompanies());\n          }}>\n            <img src=\"/refresh.png\" alt=\"새로고침\"/>\n          </a>\n        </li>\n        <li>\n          <a href=\"https://cafe.naver.com/coredenim\">\n            <img src=\"/naver-cafe.png\" alt=\"브랜디드 카페\"/>\n          </a>\n        </li>\n      </ul>\n    </header>\n    <Navbar/>\n    \n    <div className={`curtain ${curtain}`}>\n      <p>이 사이트는 더이상 운영되지 않습니다.</p>\n      <p>이전에 제공되던 내용은 지속적으로 제공 됩니다.</p>\n      <p>\n        그러나 좀 더 신속하고 주체적인 컨텐츠 제공을 받기 위해서 \n        <a href=\"https://cafe.naver.com/coredenim/72399\">주황색물고기님의 글</a>\n        을 이용하시는 것을 권장합니다.\n      </p>\n      <p>\n        계속해서 사이트를 이용하시려면\n        <a href=\"#\" className=\"this\" onClick={(e) => {\n          e.preventDefault();\n          setCurtain(true);\n        }\n        }>여기</a>\n        를 클릭해주세요.\n      </p>\n      <p>그동안 부족한 페이지에 많은 관심을 주셔서 감사합니다.</p>\n      <p>금뚱보 드림 😀👍</p>\n    </div>\n  </div>);\n}\n\nexport default Header;\n","import React from 'react';\nimport { CompanyType } from '../../reducers/company';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from '../../reducers';\nimport { LANGUAGE_ENGLISH, LANGUAGE_KOREAN } from '../../constants';\n\ninterface CompanyProps {\n  company: CompanyType\n}\nconst Company: React.FC<CompanyProps> = ({company}) => {\n  const language = useSelector((state: StoreState) => state.SettingsReducer.language);\n  // eslint-disable-next-line\n  return (<a className=\"company\" href={company.address} target=\"_blank\">\n    <div className={`thumb ${company.image && company.image.length > 0 && 'is_image'}`}>\n      <div className=\"holder\"></div>\n      <span className=\"helper\"></span>\n      {company.image && company.image.length > 0 && <img src={company.image} alt={company.name[language]}/>}\n    </div>\n    <div className=\"metadata\">\n      <h2>\n        {company.name[LANGUAGE_KOREAN]}\n        <small>: {company.name[LANGUAGE_ENGLISH]}</small>\n      </h2>\n      <div className=\"description\">{company.description || '설명없음'}</div>\n    </div>\n  </a>)\n}\n\nexport default Company;","import React from 'react';\nimport { CompanyType } from '../../reducers/company';\nimport Company from '../companies/Company';\n\nexport type CandidateType = { prefix: string, companies: Array<CompanyType> }\ninterface CompanyListProps {\n  candidate: CandidateType\n}\nconst CompanyList: React.FC<CompanyListProps> = ({candidate}) => {\n  return (\n  <div className=\"candidate\">\n    <h3>{candidate.prefix}</h3>\n    <ul>\n      {candidate.companies.map((c: CompanyType, j) => {\n        return (<li key={j}>\n          <Company company={c}/>\n        </li>);\n      })}\n    </ul>\n  </div>\n  );\n}\n\nexport default CompanyList;","import React, { useEffect } from 'react';\nimport { withRouter } from 'react-router';\nimport { RouteComponentProps } from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { StoreState } from '../reducers';\nimport { changePrefix } from '../actions/settings';\nimport { fetchCompanies } from '../actions/company';\nimport sortBy from 'lodash/sortBy';\nimport { PREFIXES, forceCompanyRefreshEmbago } from '../constants';\nimport groupBy from 'lodash/groupBy';\nimport CompanyList, { CandidateType } from '../components/companies/CompanyList';\nimport '../assets/styles/company.scss';\n\n\ninterface CompanyListProps {\n  prefix?: string\n}\nconst CompanyPage: React.FC<RouteComponentProps<CompanyListProps>> = ({match}) => {\n  const dispatch = useDispatch();\n  const { prefix } = match.params;\n  const settings = useSelector((state: StoreState) => state.SettingsReducer);\n  const companyReducer = useSelector((state: StoreState) => state.CompanyReducer);\n\n  let companies = companyReducer.companies;\n  let lastFetched = companyReducer.lastFetched;\n\n  useEffect(() => {\n    if ((!settings.prefix && prefix) || (settings.prefix !== prefix)) { dispatch(changePrefix(prefix)); }\n    if (!companies || (lastFetched && ((+new Date() - Date.parse(lastFetched)) > forceCompanyRefreshEmbago))) {\n      dispatch(fetchCompanies());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [prefix]);\n\n  let candidates: Array<CandidateType> = [];\n  const companiesByPrefix = groupBy(\n    sortBy(companies || [], [o => o.name[settings.language]]), \n    c=>c.slug[settings.language]\n  );\n  PREFIXES[settings.language].forEach((prefix: string) => {\n    candidates.push({\n      prefix: prefix,\n      companies: companiesByPrefix[prefix]\n    })\n  })\n  \n  if (prefix) candidates = candidates.filter((c: CandidateType) => c.prefix === prefix)\n\n  return (<div id=\"company-page\">\n    {candidates.map((candidate: CandidateType, i) => {\n      if (!candidate.companies) return false;\n      return <CompanyList candidate={candidate} key={i}/>\n    })}\n  </div>);\n}\n\nexport default withRouter(CompanyPage);","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Header from './components/header';\nimport CompanyPage from './pages/CompanyPage';\n\nconst App: React.FC = () => {\n  return (<HashRouter>\n    <Header/>\n    <Route path=\"/:prefix?\" component={CompanyPage}/>\n  </HashRouter>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_LANGUAGE, changeLanguageType, changePrefixType, CHANGE_PREFIX } from '../../actions/settings';\nimport { Reducer } from 'redux'\nimport { LANGUAGE_DEFAULT, LANUGAGE_TYPE } from '../../constants';\n\ntype SettingsActionType = (changeLanguageType | changePrefixType);\ninterface SettingsStateType {\n  language: LANUGAGE_TYPE,\n  prefix?: string\n}\n\nconst SettingsReducer: Reducer<SettingsStateType, SettingsActionType> = (\n  state = {language: LANGUAGE_DEFAULT}, \n  action\n) => {\n  switch (action.type) {\n    case CHANGE_LANGUAGE:\n      return {\n        ...state,\n        language: action.language,\n        prefix: undefined,\n      }\n    case CHANGE_PREFIX:\n      return {\n        ...state,\n        prefix: action.prefix\n      }\n    default:\n      return state\n  }\n}\nexport default SettingsReducer","import { Reducer } from 'redux';\nimport { CompanyResponseItem, FETCHED_COMPANIES, fetchCompaniesType } from '../../actions/company';\n\ntype CompanyActionType = (fetchCompaniesType);\nexport interface CompanyType extends CompanyResponseItem {\n  id: string,\n  slug: {\n    \"ko\": string,\n    \"en\": string\n  }\n}\ninterface CompanyStateType {\n  companies?: Array<CompanyType>,\n  lastFetched?: string,\n}\nconst CompanyReducer: Reducer<CompanyStateType, CompanyActionType> = (\n  state = {},\n  action\n) => {\n  switch (action.type) {\n    case FETCHED_COMPANIES:\n      return {\n        ...state,\n        companies: action.companies,\n        lastFetched: (new Date()).toISOString(),\n      }\n    default:\n      return state\n  }\n}\n\nexport default CompanyReducer","import { combineReducers } from 'redux';\nimport SettingsReducer from './settings';\nimport CompanyReducer from './company';\n\nconst rootReducer = combineReducers({\n  SettingsReducer,\n  CompanyReducer,\n})\n\nexport type StoreState = ReturnType<typeof rootReducer>\nexport default rootReducer;","import { StoreState } from \"./reducers\";\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined\n  }\n};\n\nexport const saveState = (state: StoreState) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Router';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './Store';\nimport './assets/styles/common.scss';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import CombinedReducer, { StoreState } from './reducers';\nimport { createStore, Store, applyMiddleware, compose } from 'redux';\nimport { loadState, saveState } from './loadStorage';\nimport throttle from 'lodash/throttle';\nimport thunk from 'redux-thunk';\n\n\nexport default function configureStore(): Store {\n  const persistedState = loadState();\n  const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(\n    CombinedReducer,\n    persistedState as StoreState,\n    composeEnhancers(\n      applyMiddleware(thunk),\n    )\n  );\n\n  store.subscribe(throttle(() => {\n    // saveState(store.getState())\n    // Specific\n    // saveState({\n    //   AuthReducer: store.getState().AuthReducer\n    // });\n    saveState({\n      CompanyReducer: {\n        companies: store.getState().CompanyReducer.companies,\n        lastFetched: store.getState().CompanyReducer.lastFetched,\n      },\n      SettingsReducer: {\n        language: store.getState().SettingsReducer.language\n      }\n    } as StoreState)\n  }, 1000));\n\n  return store;\n}\n"],"sourceRoot":""}